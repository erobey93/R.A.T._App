# R.A.T. App Technical Overview

## Architecture

### Core Components
1. **Desktop Application (RATAPP/)**
   - Windows Forms-based UI (.NET/C#)
   - Panel-based navigation system
   - Responsive form components
   - Event-driven architecture

2. **Core Library (RATAPPLibrary/)**
   - Business logic and data access layer
   - Service-based architecture
   - Entity Framework Core for data access
   - Transaction management and context handling

3. **Web Interface (RATAPP_WEB/)**
   - React/TypeScript frontend
   - ASP.NET Core backend
   - RESTful API architecture

### Data Architecture
1. **Database Design**
   - SQL Server with Entity Framework Core
   - Rich domain model with relationships
   - Transaction support
   - Migration-based schema management

2. **Service Layer Pattern**
   - BaseService providing common database operations
   - Specialized services for domain areas
   - Async/await pattern throughout
   - Robust error handling

## Key Features & Implementation

### 1. Animal Management
- **Core Service**: AnimalService
- **Features**:
  - CRUD operations for animals
  - Trait management (color, markings, ear type, coat type)
  - Image attachment support
  - Lineage tracking
  - Registration number system
  - Species and line management

### 2. Breeding Management
- **Core Service**: BreedingService
- **Features**:
  - Pairing tracking (active, upcoming, past)
  - Litter management
  - Project-based organization
  - Dam/Sire relationship tracking
  - Breeding outcome recording

### 3. Genetics System
- **Services**: 
  - BreedingCalculationService
  - ChromosomeService
  - GeneService
- **Features**:
  - Genetic trait tracking
  - Breeding calculations
  - Chromosome mapping
  - Inheritance patterns

### 4. Lineage Tracking
- **Core Service**: LineageService
- **Features**:
  - Family tree visualization
  - Ancestry mapping
  - Generation tracking
  - Maternal/Paternal line tracking

### 5. Research & Reporting
- **Services**:
  - ProjectService
  - ReportsService
  - PDFService
- **Features**:
  - Research project organization
  - PDF report generation
  - Data export capabilities
  - Custom report templates

## Technical Implementation Details

### 1. Data Access Layer
```csharp
// Context Factory Pattern
public class RatAppDbContextFactory
{
    public RatAppDbContext CreateContext()
    {
        // Creates new context with transaction support
    }
}

// Base Service Pattern
public abstract class BaseService
{
    protected async Task<T> ExecuteInTransactionAsync<T>(Func<RatAppDbContext, Task<T>> operation)
    {
        // Handles transactions with automatic rollback
    }
}
```

### 2. Service Layer Architecture
- Hierarchical service structure
- Dependency injection
- Transaction management
- Async operations
- Error handling and validation

### 3. Security Features
- Role-based access control
- Secure authentication
- Password hashing
- Session management

### 4. UI Architecture
- Modular panel system
- Responsive form components
- Event-driven updates
- Data binding patterns

## Development Workflow
1. Entity Framework Migrations
2. Service Layer Implementation
3. UI Component Development
4. Integration Testing
5. Deployment Pipeline

## Technical Considerations
1. **Performance**
   - Efficient database queries
   - Transaction management
   - Caching strategies

2. **Scalability**
   - Modular architecture
   - Service separation
   - Clean interfaces

3. **Maintainability**
   - Well-documented code
   - Consistent patterns
   - Unit test coverage

4. **Error Handling**
   - Transaction rollback
   - Exception management
   - User feedback

## Current Status
- Proof of Concept phase
- Core features implemented
- Active development of genetics system
- Ongoing UI/UX improvements
- Testing framework in place
